{"version":3,"sources":["components/card/Card.js","components/guesscount/GuessCount.js","components/halloffame/HallOfFame.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","card","feedback","index","onClick","react_default","a","createElement","className","concat","GuessCount","guesses","HallOfFame","entries","map","_ref2","date","id","player","key","FAKE_HOF","App","state","cards","_this","generateCards","currentPair","matchedCardIndices","handleCardClick","length","handleNewPairClosedBy","setState","_this$state","this","indexMatched","includes","result","candidates","shuffle","SIDE","pop","push","_this2","_this$state2","newPair","newGuesses","matched","Object","toConsumableArray","setTimeout","_this3","_this$state3","won","components_guesscount_GuessCount","components_card_Card","getFeedbackForCard","components_halloffame_HallOfFame","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9ea46e0.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Card.css'\r\n\r\nconst HIDDEN_SYMBOL = '❓'\r\n\r\nconst Card = ({ card, feedback, index, onClick }) => (\r\n    <div className={`card ${feedback}`} onClick={() => onClick(index)}>\r\n        <span className=\"symbol\">\r\n            {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\r\n        </span>\r\n    </div>\r\n)\r\n\r\nCard.propTypes = {\r\n    card: PropTypes.string.isRequired,\r\n    feedback: PropTypes.oneOf([\r\n        'hidden',\r\n        'justMatched',\r\n        'justMismatched',\r\n        'visible',\r\n    ]).isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    onClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './GuessCount.css'\r\n\r\nconst GuessCount = ({ guesses }) => <div className=\"guesses\">{guesses}</div>\r\nGuessCount.propTypes = {\r\n    guesses: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default GuessCount","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './HallOfFame.css'\r\n\r\nconst HallOfFame = ({ entries }) => (\r\n    <table className=\"hallOfFame\">\r\n        <tbody>\r\n            {\r\n                entries.map(({ date, guesses, id, player }) => (\r\n                    <tr key={id}>\r\n                        <td className=\"date\">{date}</td>\r\n                        <td className=\"guesses\">{guesses}</td>\r\n                        <td className=\"player\">{player}</td>\r\n                    </tr>\r\n                ))\r\n            }\r\n        </tbody>\r\n    </table>\r\n)\r\nHallOfFame.propTypes = {\r\n    entries: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            date: PropTypes.string.isRequired,\r\n            guesses: PropTypes.number.isRequired,\r\n            id: PropTypes.number.isRequired,\r\n            player: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired,\r\n}\r\n\r\nexport default HallOfFame\r\n\r\n// == Internal helpers ==============================================\r\n\r\nexport const FAKE_HOF = [\r\n    { id: 3, guesses: 18, date: '10/10/2017', player: 'Jane' },\r\n    { id: 2, guesses: 23, date: '11/10/2017', player: 'Kevin' },\r\n    { id: 1, guesses: 31, date: '06/10/2017', player: 'Louisa' },\r\n    { id: 0, guesses: 48, date: '14/10/2017', player: 'Marc' },\r\n]","import React, { Component } from 'react'\r\nimport shuffle from 'lodash.shuffle'\r\n\r\nimport './App.css'\r\n\r\nimport Card from './components/card/Card'\r\nimport GuessCount from './components/guesscount/GuessCount'\r\nimport HallOfFame, { FAKE_HOF } from './components/halloffame/HallOfFame'\r\n\r\nconst SIDE = 6\r\nconst SYMBOLS = '🎃🎂🎅🐰🎥🍂👨💪🎓👩🎊🏊👑☪🌱☘☀🏈💘⚽'\r\nconst VISUAL_PAUSE_MSECS = 750\r\n\r\nclass App extends Component {\r\n  state = {\r\n    cards: this.generateCards(),\r\n    currentPair: [],\r\n    guesses: 0,\r\n    matchedCardIndices: []\r\n  }\r\n\r\n  getFeedbackForCard(index) {\r\n    const { currentPair, matchedCardIndices } = this.state\r\n    const indexMatched = matchedCardIndices.includes(index)\r\n\r\n    if (currentPair.length < 2) {\r\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\r\n    }\r\n\r\n    if (currentPair.includes(index)) {\r\n      return indexMatched ? 'justMatched' : 'justMismatched'\r\n    }\r\n\r\n    return indexMatched ? 'visible' : 'hidden'\r\n  }\r\n  \r\n  generateCards() {\r\n    const result = []\r\n    const size = SIDE * SIDE\r\n    const candidates = shuffle(SYMBOLS)\r\n    while (result.length < size) {\r\n      const card = candidates.pop()\r\n      result.push(card, card)\r\n    }\r\n    return shuffle(result)\r\n  }\r\n\r\n  // Arrow fx for binding\r\n  handleCardClick = index => {\r\n    const { currentPair } = this.state\r\n\r\n    if (currentPair.length === 2) {\r\n      return\r\n    }\r\n\r\n    if (currentPair.length === 0) {\r\n      this.setState({ currentPair: [index] })\r\n      return\r\n    }\r\n\r\n    this.handleNewPairClosedBy(index)\r\n  }\r\n\r\n  handleNewPairClosedBy(index) {\r\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\r\n\r\n    const newPair = [currentPair[0], index]\r\n    const newGuesses = guesses + 1\r\n    const matched = cards[newPair[0]] === cards[newPair[1]]\r\n    this.setState({ currentPair: newPair, guesses: newGuesses })\r\n    if (matched) {\r\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\r\n    }\r\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\r\n  }\r\n\r\n  render() {\r\n    const { cards, guesses, matchedCardIndices } = this.state\r\n    const won = matchedCardIndices.length === cards.length\r\n    return (\r\n      <div className=\"memory\">\r\n        <GuessCount guesses={guesses} />\r\n        {cards.map((card, index) => (\r\n          <Card\r\n            card={card}\r\n            feedback={this.getFeedbackForCard(index)}\r\n            key={index}\r\n            index={index}\r\n            onClick={this.handleCardClick}\r\n          />\r\n        ))}\r\n        {won && <HallOfFame entries={FAKE_HOF} />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}